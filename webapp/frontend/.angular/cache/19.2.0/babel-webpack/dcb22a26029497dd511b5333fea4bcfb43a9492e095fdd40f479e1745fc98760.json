{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nlet ApiService = class ApiService {\n  http;\n  apiUrl = 'http://localhost:8000';\n  constructor(http) {\n    this.http = http;\n  }\n  textToSpeech(file) {\n    const formData = new FormData();\n    formData.append('file', file);\n    return this.http.post(`${this.apiUrl}/text-to-speech`, formData, {\n      responseType: 'blob'\n    });\n  }\n  static ctorParameters = () => [{\n    type: HttpClient\n  }];\n};\nApiService = __decorate([Injectable({\n  providedIn: 'root' // Ensure this is present\n})], ApiService);\nexport { ApiService };","map":{"version":3,"names":["Injectable","HttpClient","ApiService","http","apiUrl","constructor","textToSpeech","file","formData","FormData","append","post","responseType","__decorate","providedIn"],"sources":["/Users/jamielabed/Documents/GitHub/Text_To_Speech/webapp/frontend/src/app/api.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root' // Ensure this is present\n})\nexport class ApiService {\n  private apiUrl = 'http://localhost:8000';\n\n  constructor(private http: HttpClient) {}\n\n  textToSpeech(file: File): Observable<any> {\n    const formData = new FormData();\n    formData.append('file', file);\n\n    return this.http.post(`${this.apiUrl}/text-to-speech`, formData, {\n      responseType: 'blob'\n    });\n  }\n}"],"mappings":";AAAA,SAASA,UAAU,QAAQ,eAAe;AAC1C,SAASC,UAAU,QAAQ,sBAAsB;AAM1C,IAAMC,UAAU,GAAhB,MAAMA,UAAU;EAGDC,IAAA;EAFZC,MAAM,GAAG,uBAAuB;EAExCC,YAAoBF,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;EAAe;EAEvCG,YAAYA,CAACC,IAAU;IACrB,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,EAAE;IAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEH,IAAI,CAAC;IAE7B,OAAO,IAAI,CAACJ,IAAI,CAACQ,IAAI,CAAC,GAAG,IAAI,CAACP,MAAM,iBAAiB,EAAEI,QAAQ,EAAE;MAC/DI,YAAY,EAAE;KACf,CAAC;EACJ;;;;;AAZWV,UAAU,GAAAW,UAAA,EAHtBb,UAAU,CAAC;EACVc,UAAU,EAAE,MAAM,CAAC;CACpB,CAAC,C,EACWZ,UAAU,CAatB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}